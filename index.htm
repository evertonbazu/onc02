<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ONC - PARTE 2</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #0c0a1a;
            background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.1) 1px, transparent 0);
            background-size: 20px 20px;
            touch-action: manipulation;
            overflow-y: auto;
        }
        .main-container {
            background: linear-gradient(170deg, #1e1b4b 0%, #0c0a1a 100%);
        }
        .glass-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .option-button {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out, background-color 0.2s;
            border-bottom-width: 4px;
        }
        .option-button:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        .option-button:active {
            transform: translateY(-1px);
        }
        #feedback {
            transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
        }
        .screen {
            min-height: 100vh;
            width: 100%;
            padding: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        .video-container { 
            position: relative; 
            padding-bottom: 56.25%; 
            height: 0; 
            overflow: hidden; 
            max-width: 100%; 
            background: #000; 
            border-radius: 1rem; 
            box-shadow: 0 10px 25px rgba(0,0,0,0.2); 
        }
        .video-container iframe { 
            position: absolute; 
            top: 0; 
            left: 0; 
            width: 100%; 
            height: 100%; 
        }
        .loader {
            border: 4px solid rgba(255,255,255,0.3);
            border-top: 4px solid #a78bfa;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="main-container">

    <!-- Tela de Login / Cadastro -->
    <div id="login-screen" class="screen">
        <div class="glass-card p-6 sm:p-8 rounded-2xl shadow-xl max-w-md w-full text-center text-white">
            <div id="login-form">
                <h1 class="text-3xl sm:text-4xl font-bold text-violet-300">Acessar Jogo</h1>
                <p class="text-violet-200 mt-4">Digite seu código e senha para entrar.</p>
                <input type="text" id="login-code" placeholder="Seu código" class="mt-8 w-full text-xl p-3 rounded-xl border-2 border-violet-400 bg-white/10 placeholder-violet-300">
                <input type="password" id="login-password" placeholder="Sua senha" class="mt-4 w-full text-xl p-3 rounded-xl border-2 border-violet-400 bg-white/10 placeholder-violet-300">
                <button id="login-button" class="mt-6 w-full bg-gradient-to-r from-purple-500 to-indigo-500 text-white text-2xl font-bold py-3 rounded-xl shadow-lg hover:shadow-purple-500/50 transition flex items-center justify-center option-button border-purple-700">
                    <span class="button-text">Entrar</span>
                    <div class="loader hidden ml-3"></div>
                </button>
                <p id="login-message" class="text-red-400 mt-4 h-5"></p>
                <div class="flex space-x-2 mt-2">
                    <button id="go-to-register" class="w-1/2 text-violet-300 hover:underline">Não tenho cadastro</button>
                    <button id="view-ranking-button" class="w-1/2 text-violet-300 hover:underline">Ver Ranking</button>
                </div>
            </div>
            <div id="register-form" class="hidden">
                <h1 class="text-3xl sm:text-4xl font-bold text-violet-300">Criar Cadastro</h1>
                <p class="text-violet-200 mt-4">Preencha seus dados para criar um acesso.</p>
                <input type="text" id="register-name" placeholder="Nome Completo" class="mt-8 w-full text-xl p-3 rounded-xl border-2 border-violet-400 bg-white/10 placeholder-violet-300">
                <select id="register-class" class="mt-4 w-full text-xl p-3 rounded-xl border-2 border-violet-400 bg-white/10 placeholder-violet-300">
                    <option value="" class="text-black">Selecione sua turma</option>
                    <option value="5º Ano A" class="text-black">5º Ano A</option>
                    <option value="5º Ano B" class="text-black">5º Ano B</option>
                </select>
                <input type="text" id="register-code" placeholder="Crie um código de acesso" class="mt-4 w-full text-xl p-3 rounded-xl border-2 border-violet-400 bg-white/10 placeholder-violet-300">
                <input type="password" id="register-password" placeholder="Crie uma senha" class="mt-4 w-full text-xl p-3 rounded-xl border-2 border-violet-400 bg-white/10 placeholder-violet-300">
                <button id="register-button" class="mt-6 w-full bg-gradient-to-r from-green-500 to-emerald-500 text-white text-2xl font-bold py-3 rounded-xl shadow-lg hover:shadow-green-500/50 transition flex items-center justify-center option-button border-green-700">
                    <span class="button-text">Cadastrar e Entrar</span>
                    <div class="loader hidden ml-3"></div>
                </button>
                <p id="register-message" class="text-red-400 mt-4 h-5"></p>
                <button id="back-to-login" class="mt-2 text-violet-300 hover:underline">Já tenho cadastro</button>
            </div>
        </div>
    </div>

    <!-- Tela do Vídeo -->
    <div id="video-screen" class="screen hidden">
        <div class="glass-card p-6 sm:p-8 rounded-2xl shadow-xl max-w-3xl w-full text-center text-white">
            <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold text-violet-300">Vamos aprender!</h2>
            <p class="text-base sm:text-lg text-violet-200 mt-2 mb-4">Assista ao vídeo para revisar e ganhar até 1000 pontos!</p>
            <div class="mb-4 bg-white/10 rounded-full px-6 py-2 inline-block">
                <span class="text-2xl font-semibold text-violet-200">Pontos: <span class="score-display">0</span></span>
            </div>
            <div class="video-container">
                <div id="player"></div>
            </div>
            <button id="continue-btn" class="mt-8 w-full bg-gradient-to-r from-green-500 to-emerald-500 text-white text-2xl sm:text-3xl font-bold py-3 sm:py-4 rounded-xl shadow-lg transition transform hover:shadow-green-500/50 opacity-50 cursor-not-allowed option-button border-green-700" disabled>
                Ir para o Jogo!
            </button>
            <button id="skip-video-btn" class="mt-2 text-gray-400 hover:text-gray-200 hover:underline">Pular vídeo (não ganha pontos)</button>
        </div>
    </div>

    <!-- Tela do Jogo (Quiz) -->
    <div id="game-screen" class="screen hidden">
        <div class="w-full max-w-4xl">
             <header class="text-center mb-4 sm:mb-8 w-full">
                 <div class="flex justify-center items-center w-full">
                     <div class="glass-card rounded-full px-4 sm:px-6 py-2">
                         <span class="text-xl sm:text-2xl font-semibold text-violet-200">Pontos: <span class="score-display">0</span></span>
                     </div>
                 </div>
                 <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold text-white mt-4" style="text-shadow: 0 0 15px rgba(167, 139, 250, 0.7);">
                     ONC - PARTE 2
                 </h1>
                  <p class="text-lg sm:text-xl text-violet-300 mt-2">Olá, <span id="player-firstname"></span>! Escolha a resposta certa.</p>
             </header>
            <main class="w-full glass-card p-6 sm:p-8 rounded-2xl shadow-xl text-center">
                <div id="question-container" class="mb-6 sm:mb-8 text-xl sm:text-2xl md:text-3xl font-semibold text-white min-h-[6rem] flex items-center justify-center">
                    <!-- A pergunta aparecerá aqui -->
                </div>
                <div id="options-container" class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                    <!-- As opções aparecerão aqui -->
                </div>
            </main>
        </div>
    </div>

    <!-- Tela Final (Game Over) -->
    <div id="end-screen" class="screen hidden">
        <div class="glass-card p-6 sm:p-8 rounded-2xl shadow-xl max-w-3xl w-full text-center my-8 text-white">
            <div id="end-screen-content">
                <h1 class="text-3xl sm:text-4xl font-bold text-violet-300">Fim de Jogo!</h1>
                <p id="final-message" class="text-lg text-violet-200 mt-4 font-semibold"></p>
                <p id="bonus-message" class="text-lg text-green-400 mt-2 font-semibold"></p>
                <div class="flex justify-center items-center my-6 text-violet-200">
                    <div class="text-xl"><strong>Pontos:</strong> <span id="final-score">0</span></div>
                </div>
            </div>
            <h2 class="text-2xl sm:text-3xl font-bold text-violet-300 mt-6 mb-4">Ranking (Top 100)</h2>
            <div class="overflow-y-auto h-64 bg-white/5 rounded-lg">
                <table class="w-full text-left">
                    <thead class="bg-white/10 sticky top-0">
                        <tr>
                            <th class="p-2">#</th>
                            <th class="p-2">Nome</th>
                            <th class="p-2">Pontos</th>
                            <th class="p-2">Turma</th>
                        </tr>
                    </thead>
                    <tbody id="ranking-body">
                        <tr><td colspan="4" class="p-8 text-center"><div class="loader mx-auto"></div></td></tr>
                    </tbody>
                </table>
            </div>
            <button id="play-again-button" class="mt-8 w-full bg-gradient-to-r from-yellow-500 to-orange-500 text-white text-2xl sm:text-3xl font-bold py-3 rounded-xl shadow-lg hover:shadow-yellow-500/50 transition option-button border-yellow-700">
                Jogar Novamente
            </button>
            <button id="back-from-ranking-button" class="mt-8 w-full bg-gray-500 text-white text-2xl sm:text-3xl font-bold py-3 rounded-xl shadow-lg hover:bg-gray-600 transition hidden option-button border-gray-700">
                Voltar
            </button>
        </div>
    </div>

    <div id="feedback" class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-6 sm:p-8 rounded-2xl text-white text-2xl font-bold shadow-2xl opacity-0 pointer-events-none w-11/12 max-w-sm text-center"></div>
    
    <script src="https://www.youtube.com/iframe_api"></script>
    <script>
        const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyvzdtou17UCu8lmOFg9fxVEaLg1FnWcvexCYUZzqNLcUhiE6mZW_OkxeeI874AXZRT/exec';
        const NOME_DESTE_JOGO = "ONC - PARTE 2";

        // --- ELEMENTOS DO DOM ---
        const loginScreen = document.getElementById('login-screen');
        const videoScreen = document.getElementById('video-screen');
        const gameScreen = document.getElementById('game-screen');
        const endScreen = document.getElementById('end-screen');
        const continueBtn = document.getElementById('continue-btn');
        const skipVideoBtn = document.getElementById('skip-video-btn');
        const loginForm = document.getElementById('login-form');
        const loginCodeInput = document.getElementById('login-code');
        const loginPasswordInput = document.getElementById('login-password');
        const loginButton = document.getElementById('login-button');
        const loginMessage = document.getElementById('login-message');
        const goToRegisterButton = document.getElementById('go-to-register');
        const registerForm = document.getElementById('register-form');
        const registerNameInput = document.getElementById('register-name');
        const registerClassInput = document.getElementById('register-class');
        const registerCodeInput = document.getElementById('register-code');
        const registerPasswordInput = document.getElementById('register-password');
        const registerButton = document.getElementById('register-button');
        const registerMessage = document.getElementById('register-message');
        const backToLoginButton = document.getElementById('back-to-login');
        const playerFirstNameEl = document.getElementById('player-firstname');
        const finalMessageEl = document.getElementById('final-message');
        const viewRankingButton = document.getElementById('view-ranking-button');
        const backFromRankingButton = document.getElementById('back-from-ranking-button');
        const playAgainButton = document.getElementById('play-again-button');
        const endScreenContent = document.getElementById('end-screen-content');
        const questionContainer = document.getElementById('question-container');
        const optionsContainer = document.getElementById('options-container');
        const feedbackEl = document.getElementById('feedback');
        const bonusMessageEl = document.getElementById('bonus-message');

        // --- ESTADO DO JOGO ---
        let score = 0;
        let startTime;
        let loggedInUser = null;
        let videoPointsInvalidated = false;
        let currentQuestionIndex = 0;
        let shuffledQuestions = [];

        // --- BANCO DE PERGUNTAS COM EXPLICAÇÕES E PONTOS ---
        const questions = [
            // Sistema Digestório (10 Pontos)
            { question: 'Qual órgão do sistema digestório é responsável por triturar os alimentos com os dentes e iniciar a digestão com a saliva?', options: ['Estômago', 'Intestino delgado', 'Boca', 'Esôfago', 'Fígado'], answer: 'Boca', explanation: 'A boca, com os dentes e a saliva, é o primeiro local onde os alimentos são triturados e a digestão química começa.', points: 10 },
            { question: 'Qual é a principal função do esôfago no processo digestório?', options: ['Absorver nutrientes', 'Triturar os alimentos', 'Levar a comida ao estômago através de movimentos peristálticos', 'Produzir ácido clorídrico', 'Formar as fezes'], answer: 'Levar a comida ao estômago através de movimentos peristálticos', explanation: 'O esôfago é um tubo muscular que usa movimentos de onda (peristaltismo) para empurrar o alimento até o estômago.', points: 10 },
            { question: 'Quando mastigamos um alimento na boca, que tipo de digestão está acontecendo principalmente?', options: ['Digestão química', 'Absorção', 'Eliminação', 'Digestão mecânica', 'Digestão enzimática'], answer: 'Digestão mecânica', explanation: 'A mastigação é um exemplo de digestão mecânica, onde o alimento é fisicamente quebrado em pedaços menores.', points: 10 },
            { question: 'Onde ocorre a principal absorção dos nutrientes, graças às vilosidades?', options: ['Estômago', 'Intestino grosso', 'Esôfago', 'Intestino delgado', 'Fígado'], answer: 'Intestino delgado', explanation: 'O intestino delgado possui pequenas dobras chamadas vilosidades que aumentam muito a área de superfície para absorver nutrientes.', points: 10 },
            { question: 'Qual órgão produz a bile, que ajuda na digestão das gorduras?', options: ['Pâncreas', 'Estômago', 'Intestino grosso', 'Fígado', 'Boca'], answer: 'Fígado', explanation: 'O fígado produz a bile, uma substância que ajuda a quebrar as gorduras em pequenas partículas para facilitar a digestão.', points: 10 },
            { question: 'Qual tipo de alimento leva mais tempo para ser digerido pelo corpo?', options: ['Líquidos', 'Frutas', 'Verduras', 'Carnes', 'Gorduras'], answer: 'Gorduras', explanation: 'Gorduras são os alimentos que levam mais tempo para serem digeridos, de 6 a 8 horas, pois exigem um processo mais complexo.', points: 10 },

            // Sistema Respiratório (10 Pontos)
            { question: 'Qual a principal função do sistema respiratório?', options: ['Quebrar alimentos', 'Transportar sangue', 'Realizar trocas gasosas entre o corpo e o ambiente', 'Produzir hormônios', 'Eliminar fezes'], answer: 'Realizar trocas gasosas entre o corpo e o ambiente', explanation: 'O sistema respiratório capta oxigênio e elimina gás carbônico.', points: 10 },
            { question: 'Em qual parte do sistema respiratório estão as cordas vocais, responsáveis pela produção do som da voz?', options: ['Faringe', 'Traqueia', 'Brônquios', 'Laringe', 'Alvéolos'], answer: 'Laringe', explanation: 'A laringe contém as cordas vocais, que vibram com a passagem do ar para produzir a voz.', points: 10 },
            { question: 'Onde acontecem as trocas gasosas, ou seja, a troca de oxigênio por gás carbônico nos pulmões?', options: ['Traqueia', 'Brônquios', 'Bronquíolos', 'Alvéolos', 'Faringe'], answer: 'Alvéolos', explanation: 'Os alvéolos são pequenas bolsas nos pulmões, com paredes muito finas, onde o oxigênio entra no sangue e o gás carbônico sai.', points: 10 },
            { question: 'O que acontece com o diafragma e os pulmões durante a inspiração?', options: ['O diafragma sobe e os pulmões se contraem', 'O diafragma desce e os pulmões se expandem', 'O diafragma fica parado e os pulmões se contraem', 'O diafragma sobe e os pulmões se expandem', 'O diafragma desce e os pulmões ficam parados'], answer: 'O diafragma desce e os pulmões se expandem', explanation: 'Durante a inspiração, o diafragma se contrai e desce, o que aumenta o espaço nos pulmões e permite que o ar entre.', points: 10 },
            { question: 'Qual o nome do processo de troca de oxigênio por gás carbônico que ocorre nos alvéolos pulmonares?', options: ['Digestão', 'Absorção', 'Excreção', 'Hematose', 'Circulação'], answer: 'Hematose', explanation: 'Hematose é o nome específico dado à troca de gases (oxigênio e gás carbônico) entre os alvéolos e o sangue.', points: 10 },
            { question: 'Qual a frequência respiratória normal em uma pessoa adulta em repouso?', options: ['5 a 10 respirações por minuto', '12 a 20 respirações por minuto', '25 a 30 respirações por minuto', '30 a 40 respirações por minuto', 'Mais de 40 respirações por minuto'], answer: '12 a 20 respirações por minuto', explanation: 'Essa é a faixa considerada normal para adultos saudáveis em repouso.', points: 10 },
            
            // Relação Respiração, Digestão e Energia (20 Pontos)
            { question: 'Qual a substância que a digestão quebra dos carboidratos para ser usada como "combustível" nas células?', options: ['Proteína', 'Gordura', 'Glicose', 'Água', 'Sais minerais'], answer: 'Glicose', explanation: 'Os carboidratos são quebrados em glicose, que é a principal fonte de energia para as células do corpo.', points: 20 },
            { question: 'Para o corpo produzir energia, quais duas substâncias principais ele combina dentro das células?', options: ['Água e gás carbônico', 'Proteína e gordura', 'Glicose e oxigênio', 'Sais minerais e vitaminas', 'Fibra e água'], answer: 'Glicose e oxigênio', explanation: 'A glicose (do alimento) e o oxigênio (do ar) são combinados nas células para produzir energia.', points: 20 },
            { question: 'Onde ocorre o processo de respiração celular, que produz energia para o corpo?', options: ['Na boca', 'No estômago', 'Nas mitocôndrias das células', 'Nos pulmões', 'Nos rins'], answer: 'Nas mitocôndrias das células', explanation: 'As mitocôndrias são como as "usinas de energia" das células, onde a glicose e o oxigênio são transformados em energia (ATP).', points: 20 },
            { question: 'Além de energia, quais são os outros produtos da respiração celular que precisam ser eliminados do corpo?', options: ['Proteínas e vitaminas', 'Carboidratos e gorduras', 'Gás carbônico e água', 'Cálcio e ferro', 'Oxigênio e glicose'], answer: 'Gás carbônico e água', explanation: 'O gás carbônico é eliminado pelos pulmões e a água é eliminada pela urina e suor.', points: 20 },

            // Sistema Circulatório (20 Pontos)
            { question: 'Qual a principal função do sistema circulatório?', options: ['Produzir alimentos para o corpo', 'Filtrar o ar que respiramos', 'Transportar sangue, nutrientes, oxigênio e resíduos por todo o corpo', 'Quebrar moléculas grandes em pequenas', 'Formar as fezes'], answer: 'Transportar sangue, nutrientes, oxigênio e resíduos por todo o corpo', explanation: 'O sistema circulatório é a rede de transporte do corpo.', points: 20 },
            { question: 'Quantas cavidades tem o coração humano?', options: ['Duas', 'Três', 'Quatro', 'Cinco', 'Seis'], answer: 'Quatro', explanation: 'O coração humano tem dois átrios (superiores) e dois ventrículos (inferiores).', points: 20 },
            { question: 'Qual componente do sangue é responsável por transportar o oxigênio através da hemoglobina?', options: ['Plasma', 'Glóbulos brancos', 'Plaquetas', 'Glóbulos vermelhos', 'Água'], answer: 'Glóbulos vermelhos', explanation: 'Os glóbulos vermelhos contêm hemoglobina, que se liga ao oxigênio para transportá-lo.', points: 20 },
            { question: 'Quais vasos sanguíneos levam sangue do coração para o corpo (sangue geralmente oxigenado)?', options: ['Veias', 'Capilares', 'Artérias', 'Linfáticos', 'Túbulos'], answer: 'Artérias', explanation: 'As artérias são vasos que transportam sangue rico em oxigênio do coração para todas as partes do corpo.', points: 20 },
            { question: 'Onde ocorrem as trocas de substâncias (nutrientes e gases) entre o sangue e as células do corpo?', options: ['Artérias grandes', 'Veias grandes', 'Capilares', 'Coração', 'Pulmões'], answer: 'Capilares', explanation: 'Os capilares são vasos sanguíneos muito finos, onde as paredes são tão finas que permitem a troca de oxigênio, nutrientes e resíduos com as células.', points: 20 },
            { question: 'Qual tipo de circulação leva o sangue do coração para os pulmões e de volta ao coração para ser oxigenado?', options: ['Circulação sistêmica', 'Circulação dupla', 'Circulação pulmonar', 'Circulação portal', 'Circulação linfática'], answer: 'Circulação pulmonar', explanation: 'A circulação pulmonar é o caminho do sangue do coração para os pulmões (onde pega oxigênio) e de volta ao coração.', points: 20 },
            
            // Transporte de Nutrientes e Gases (30 Pontos)
            { question: 'Onde o oxigênio se liga para ser transportado dos pulmões para todas as células do corpo?', options: ['No plasma', 'Nos glóbulos brancos', 'Na hemoglobina dos glóbulos vermelhos', 'Nas plaquetas', 'Na água'], answer: 'Na hemoglobina dos glóbulos vermelhos', explanation: 'A hemoglobina, uma proteína presente nos glóbulos vermelhos, é a principal transportadora de oxigênio.', points: 30 },
            { question: 'O gás carbônico, produto da respiração celular, é transportado das células para os pulmões para ser eliminado através de qual processo?', options: ['Inspiração', 'Digestão', 'Expiração', 'Absorção', 'Coagulação'], answer: 'Expiração', explanation: 'O gás carbônico é um resíduo da respiração celular e é eliminado do corpo quando expiramos (soltamos o ar).', points: 30 },
            { question: 'Qual mecanismo de transporte é responsável pelo movimento de gases, como oxigênio e gás carbônico, através das membranas celulares, sem gastar energia?', options: ['Transporte ativo', 'Osmose', 'Pressão sanguínea', 'Difusão', 'Circulação'], answer: 'Difusão', explanation: 'A difusão é o movimento de substâncias de uma área de maior concentração para uma de menor concentração, sem gasto de energia, como acontece com o oxigênio e o gás carbônico.', points: 30 },

            // Excreção de Resíduos Celulares (30 Pontos)
            { question: 'Qual órgão é o principal responsável por filtrar o sangue e produzir a urina, eliminando resíduos como ureia?', options: ['Fígado', 'Pulmões', 'Pele', 'Rins', 'Intestino grosso'], answer: 'Rins', explanation: 'Os rins filtram o sangue, removendo substâncias indesejáveis e formando a urina.', points: 30 },
            { question: 'Além de oxigenar o sangue, qual outro resíduo os pulmões eliminam do corpo a cada expiração?', options: ['Ureia', 'Ácido úrico', 'Gás carbônico', 'Excesso de sais', 'Gorduras'], answer: 'Gás carbônico', explanation: 'Os pulmões eliminam o gás carbônico, que é um produto da respiração celular, a cada expiração.', points: 30 },
            { question: 'Como a pele contribui para a eliminação de resíduos do corpo, além de ajudar a regular a temperatura?', options: ['Produzindo bile', 'Filtrando o sangue', 'Eliminando água, sais e pequenas quantidades de ureia pelo suor', 'Quebrando toxinas', 'Formando fezes'], answer: 'Eliminando água, sais e pequenas quantidades de ureia pelo suor', explanation: 'O suor ajuda a liberar excesso de água, sais e algumas toxinas.', points: 30 },
            { question: 'Qual órgão é responsável por processar toxinas e transformá-las em substâncias menos nocivas, ajudando na desintoxicação do corpo?', options: ['Rins', 'Pulmões', 'Fígado', 'Pele', 'Coração'], answer: 'Fígado', explanation: 'O fígado tem um papel crucial na desintoxicação, processando medicamentos, álcool e outras substâncias tóxicas.', points: 30 },

            // Grupos Alimentares e Funções dos Nutrientes (30 Pontos)
            { question: 'Qual a principal função dos carboidratos no nosso corpo?', options: ['Construção de músculos', 'Energia imediata para as células', 'Isolamento térmico', 'Absorção de vitaminas lipossolúveis', 'Formação de anticorpos'], answer: 'Energia imediata para as células', explanation: 'Os carboidratos são a principal e mais rápida fonte de energia para o corpo, especialmente para o cérebro.', points: 30 },
            { question: 'Qual a principal função das proteínas no nosso corpo?', options: ['Fornecer energia concentrada', 'Ser a principal fonte de energia para o cérebro', 'Construção e reparação de tecidos, como músculos e pele', 'Regular a temperatura corporal', 'Ajudar na absorção de vitaminas A, D, E, K'], answer: 'Construção e reparação de tecidos, como músculos e pele', explanation: 'As proteínas são os "tijolos" do corpo, essenciais para crescer, reparar e manter os tecidos.', points: 30 },
            { question: 'As gorduras têm diversas funções. Qual das opções abaixo NÃO é uma função principal das gorduras?', options: ['Energia concentrada', 'Isolamento térmico', 'Proteção de órgãos', 'Absorção de vitaminas lipossolúveis', 'Ser a base para a formação de anticorpos'], answer: 'Ser a base para a formação de anticorpos', explanation: 'A formação de anticorpos é uma função das proteínas, parte do sistema de defesa do corpo.', points: 30 },
            { question: 'As vitaminas são micronutrientes importantes. Qual característica NÃO se aplica às vitaminas?', options: ['São necessárias em pequenas quantidades', 'São produzidas em grandes quantidades pelo corpo', 'Devem vir da alimentação', 'Têm funções reguladoras em reações metabólicas', 'Podem ser lipossolúveis ou hidrossolúveis'], answer: 'São produzidas em grandes quantidades pelo corpo', explanation: 'A maioria das vitaminas não é produzida pelo corpo (ou é produzida em quantidades insuficientes) e, por isso, precisamos obtê-las através da alimentação.', points: 30 },
            { question: 'Qual mineral é fundamental para a formação dos ossos e dentes, além de ser importante para a contração muscular?', options: ['Ferro', 'Sódio', 'Potássio', 'Zinco', 'Cálcio'], answer: 'Cálcio', explanation: 'O cálcio é o mineral mais abundante no corpo e é essencial para a estrutura dos ossos e dentes, além de ser crucial para a contração dos músculos.', points: 30 },
            { question: 'Em termos de porcentagem das calorias totais diárias, qual grupo de nutrientes deve ser consumido em maior quantidade?', options: ['Proteínas (10-35%)', 'Gorduras (20-35%)', 'Carboidratos (45-65%)', 'Vitaminas', 'Sais Minerais'], answer: 'Carboidratos (45-65%)', explanation: 'Os carboidratos são a principal fonte de energia e devem compor a maior parte das calorias diárias.', points: 30 },

            // Calorias e Alimentação Equilibrada (40 Pontos)
            { question: 'O que são calorias nos alimentos?', options: ['Unidades de medida do sabor', 'Unidades de medida da energia fornecida', 'Unidades de medida do peso', 'Unidades de medida da cor', 'Unidades de medida da quantidade de água'], answer: 'Unidades de medida da energia fornecida', explanation: 'As calorias indicam a quantidade de energia que um alimento pode fornecer ao corpo.', points: 40 },
            { question: 'Qual o principal objetivo de uma alimentação equilibrada, além de contar calorias?', options: ['Comer sempre a mesma coisa', 'Comer apenas um tipo de alimento', 'Considerar a qualidade e variedade dos nutrientes', 'Comer o máximo possível para ter energia', 'Fazer dietas muito restritivas'], answer: 'Considerar a qualidade e variedade dos nutrientes', explanation: 'Uma alimentação equilibrada foca em fornecer todos os nutrientes necessários, de diferentes grupos alimentares e com boa qualidade.', points: 40 },
            { question: 'O que determina o peso corporal de uma pessoa?', options: ['Apenas a idade', 'Apenas o sexo', 'O balanço entre calorias consumidas e calorias gastas', 'Apenas o tipo de alimento que come', 'Apenas o quanto dorme'], answer: 'O balanço entre calorias consumidas e calorias gastas', explanation: 'Se consumimos mais calorias do que gastamos, ganhamos peso; se gastamos mais do que consumimos, perdemos peso.', points: 40 },

            // Alimentação Saudável e Personalizada (40 Pontos)
            { question: 'Por que não existe uma dieta única ideal para todas as pessoas?', options: ['Porque todas as pessoas gostam dos mesmos alimentos', 'Porque o corpo de cada pessoa tem necessidades nutricionais específicas', 'Porque dietas personalizadas são mais caras', 'Porque é mais fácil seguir uma dieta única', 'Porque apenas atletas precisam de dietas específicas'], answer: 'Porque o corpo de cada pessoa tem necessidades nutricionais específicas', explanation: 'Fatores como idade, sexo, genética, nível de atividade física e condições de saúde fazem com que as necessidades variem.', points: 40 },

            // Obesidade, Desnutrição e Alimentação Inadequada (40 Pontos)
            { question: 'A obesidade é o acúmulo excessivo de gordura corporal. Qual das opções abaixo NÃO é uma consequência para a saúde relacionada à obesidade?', options: ['Doenças cardiovasculares', 'Diabetes tipo 2', 'Problemas articulares', 'Aumento da imunidade', 'Aspectos psicológicos negativos'], answer: 'Aumento da imunidade', explanation: 'Na verdade, a obesidade pode levar a uma diminuição da imunidade e inflamação crônica, não a um aumento.', points: 40 },
            { question: 'Qual é um dos sinais e consequências da desnutrição em crianças?', options: ['Crescimento adequado e peso normal para a idade', 'Aumento da energia e capacidade física', 'Maior susceptibilidade a infecções e crescimento inadequado', 'Melhora da concentração e aprendizagem', 'Aumento da imunidade'], answer: 'Maior susceptibilidade a infecções e crescimento inadequado', explanation: 'A falta de nutrientes enfraquece o sistema imunológico e impede o crescimento normal.', points: 40 },

            // Hábitos de Vida Saudáveis (40 Pontos)
            { question: 'Qual é uma prática importante da alimentação consciente?', options: ['Comer rapidamente sem prestar atenção', 'Pular refeições regularmente', 'Mastigar adequadamente e comer devagar', 'Beber pouca água durante o dia', 'Comer sempre os mesmos alimentos'], answer: 'Mastigar adequadamente e comer devagar', explanation: 'Comer devagar e mastigar bem ajuda a perceber a saciedade e a desfrutar mais do alimento.', points: 40 },
            { question: 'Para ter um sono de qualidade, qual das ações abaixo é recomendada?', options: ['Usar dispositivos eletrônicos na cama antes de dormir', 'Dormir e acordar em horários diferentes a cada dia', 'Manter o quarto iluminado e barulhento', 'Ter uma rotina relaxante antes de dormir', 'Dormir poucas horas para ter mais tempo'], answer: 'Ter uma rotina relaxante antes de dormir', explanation: 'Atividades como ler ou tomar um banho morno ajudam o corpo a se preparar para o sono.', points: 40 },
            { question: 'Qual estratégia ajuda na gestão do estresse?', options: ['Acumular tarefas e não planejar o tempo', 'Isolar-se de amigos e familiares', 'Praticar técnicas de relaxamento como respiração profunda', 'Deixar problemas sem conversar sobre eles', 'Aumentar o consumo de cafeína'], answer: 'Praticar técnicas de relaxamento como respiração profunda', explanation: 'Técnicas de relaxamento ajudam a acalmar a mente e o corpo, reduzindo o estresse.', points: 40 },
            { question: 'Qual hábito é importante para a prevenção de doenças e manutenção da saúde?', options: ['Evitar lavar as mãos', 'Não realizar exames médicos preventivos', 'Manter o calendário vacinal atualizado', 'Consumir álcool em excesso', 'Não usar protetor solar'], answer: 'Manter o calendário vacinal atualizado', explanation: 'A vacinação protege contra diversas doenças infecciosas.', points: 40 },

            // Importância da Atividade Física (40 Pontos)
            { question: 'Como a atividade física regular beneficia o sistema cardiovascular?', options: ['Aumenta a pressão arterial', 'Torna o coração menos eficiente', 'Fortalece o coração e melhora a circulação', 'Aumenta o risco de doenças cardíacas', 'Diminui o fluxo sanguíneo'], answer: 'Fortalece o coração e melhora a circulação', explanation: 'O coração se torna uma bomba mais forte, e a circulação do sangue melhora.', points: 40 },
            { question: 'Qual o benefício da atividade física para o sistema respiratório?', options: ['Diminui a capacidade pulmonar', 'Piora a oxigenação do sangue', 'Fortalece os músculos respiratórios e aumenta o volume de ar inspirado', 'Aumenta o cansaço em atividades diárias', 'Prejudica a limpeza pulmonar'], answer: 'Fortalece os músculos respiratórios e aumenta o volume de ar inspirado', explanation: 'Exercícios tornam os pulmões mais eficientes, permitindo captar mais oxigênio e fortalecendo os músculos que ajudam a respirar.', points: 40 },
            { question: 'Qual o benefício da atividade física para os ossos e músculos?', options: ['Diminui a densidade óssea', 'Reduz a força muscular', 'Aumenta a resistência e força muscular, tornando os ossos mais fortes', 'Piora a coordenação motora', 'Aumenta o risco de lesões'], answer: 'Aumenta a resistência e força muscular, tornando os ossos mais fortes', explanation: 'O exercício fortalece tanto os músculos quanto os ossos, tornando-os mais resistentes.', points: 40 },
            { question: 'A prática de exercícios físicos tem benefícios psicológicos importantes. Qual é um deles?', options: ['Aumento do estresse', 'Piora do humor e da autoestima', 'Redução do estresse e liberação de hormônios do bem-estar', 'Diminuição da memória e concentração', 'Piora da qualidade do sono'], answer: 'Redução do estresse e liberação de hormônios do bem-estar', explanation: 'O exercício libera endorfinas, que são hormônios que promovem a sensação de bem-estar e reduzem o estresse.', points: 40 },

            // Avaliação Crítica de Dietas e Rotinas (40 Pontos)
            { question: 'Ao avaliar informações sobre dietas e saúde, qual é um sinal de alerta que indica que uma dieta pode ser duvidosa?', options: ['Promessas de resultados rápidos e "milagrosos" sem esforço', 'Baseada em estudos científicos controlados', 'Recomendação de consumir alimentos variados', 'Foco em mudanças graduais e sustentáveis', 'Orientação para buscar profissionais qualificados'], answer: 'Promessas de resultados rápidos e "milagrosos" sem esforço', explanation: 'Dietas que prometem perda de peso muito rápida, "curas" para várias condições ou resultados sem qualquer esforço são geralmente irrealistas e podem ser prejudiciais.', points: 40 }
        ];

        // --- FUNÇÕES GERAIS E DE TELA ---
        function showScreen(screenToShow) {
            document.querySelectorAll('.screen').forEach(screen => screen.classList.add('hidden'));
            screenToShow.classList.remove('hidden');
        }

        function toggleButtonLoader(button, show) {
            const buttonText = button.querySelector('.button-text');
            const loader = button.querySelector('.loader');
            if (buttonText && loader) {
                buttonText.style.display = show ? 'none' : 'inline';
                loader.style.display = show ? 'inline-block' : 'none';
            }
            button.disabled = show;
        }

        async function callAppsScript(action, data) {
            try {
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    mode: 'cors',
                    redirect: 'follow',
                    headers: { 'Content-Type': 'text/plain;charset=utf-8', },
                    body: JSON.stringify({ action, ...data })
                });
                if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
                return await response.json();
            } catch (error) {
                console.error("Erro ao contatar o Apps Script:", error);
                return { status: 'error', message: 'Falha de comunicação. Verifique a publicação do script e sua conexão.' };
            }
        }
        
        function capitalizeName(name) {
            return name.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
        }

        function handleSuccessfulLogin(userData) {
            const firstName = userData.name.split(' ')[0];
            loggedInUser = { ...userData, firstName };
            sessionStorage.setItem('loggedInUser', JSON.stringify(loggedInUser));
            playerFirstNameEl.textContent = firstName;
            showScreen(videoScreen);
        }

        // --- LÓGICA DE LOGIN E CADASTRO ---
        loginButton.addEventListener('click', async () => {
            const code = loginCodeInput.value.trim();
            const password = loginPasswordInput.value.trim();
            loginMessage.textContent = '';
            if (!code || !password) {
                loginMessage.textContent = 'Preencha o código e a senha.';
                return;
            }
            toggleButtonLoader(loginButton, true);
            const result = await callAppsScript('login', { code, password });
            toggleButtonLoader(loginButton, false);
            if (result.status === 'success') {
                handleSuccessfulLogin({ name: result.name, code: code, turma: result.turma });
            } else if (result.status === 'not_found') {
                loginForm.classList.add('hidden');
                registerForm.classList.remove('hidden');
                registerCodeInput.value = code;
                registerCodeInput.removeAttribute('readonly');
            } else {
                loginMessage.textContent = result.message || 'Ocorreu um erro.';
            }
        });
        
        goToRegisterButton.addEventListener('click', () => {
            loginForm.classList.add('hidden');
            registerForm.classList.remove('hidden');
            loginMessage.textContent = '';
            registerCodeInput.removeAttribute('readonly');
            registerCodeInput.value = '';
        });

        registerButton.addEventListener('click', async () => {
            const rawName = registerNameInput.value.trim();
            const turma = registerClassInput.value;
            const code = registerCodeInput.value.trim();
            const password = registerPasswordInput.value.trim();
            registerMessage.textContent = '';
            if (!rawName || !turma || !code || !password) {
                registerMessage.textContent = 'Todos os campos são obrigatórios.';
                return;
            }
            const name = capitalizeName(rawName);
            toggleButtonLoader(registerButton, true);
            const data = { name, turma, code, password };
            const result = await callAppsScript('register', data);
            toggleButtonLoader(registerButton, false);
            if (result.status === 'success') {
                handleSuccessfulLogin({ name: name, code: code, turma: turma });
            } else {
                registerMessage.textContent = result.message || 'Ocorreu um erro.';
            }
        });

        backToLoginButton.addEventListener('click', () => {
            registerForm.classList.add('hidden');
            loginForm.classList.remove('hidden');
            registerMessage.textContent = '';
        });

        loginPasswordInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') loginButton.click(); });
        loginCodeInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') loginButton.click(); });
        registerPasswordInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') registerButton.click(); });
        registerCodeInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') registerButton.click(); });
        registerNameInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') registerButton.click(); });

        window.addEventListener('load', () => {
            const user = sessionStorage.getItem('loggedInUser');
            if (user) {
                loggedInUser = JSON.parse(user);
                playerFirstNameEl.textContent = loggedInUser.firstName;
                showScreen(videoScreen);
            } else {
                showScreen(loginScreen);
            }
            updateScoreDisplay();
        });
        
        // --- LÓGICA DO VÍDEO ---
        let player;
        let progressCheckInterval;
        let maxWatchedTime = 0;

        function updateScoreDisplay() {
            document.querySelectorAll('.score-display').forEach(el => el.textContent = score);
        }

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '100%',
                width: '100%',
                videoId: 'k0W2mmr4oEQ',
                playerVars: { 'playsinline': 1, 'rel': 0, 'controls': 1 },
                events: { 'onReady': onPlayerReady, 'onStateChange': onPlayerStateChange }
            });
        }

        function onPlayerReady(event) {
            maxWatchedTime = 0;
            videoPointsInvalidated = false;
        }

        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING) {
                clearInterval(progressCheckInterval); 
                progressCheckInterval = setInterval(() => {
                    const currentTime = player.getCurrentTime();
                    const duration = player.getDuration();
                    const isMuted = player.isMuted();
                    const playbackRate = player.getPlaybackRate();
                    const scoreTextEl = videoScreen.querySelector('.score-display').parentElement;

                    if (currentTime > maxWatchedTime + 1.5) {
                        player.seekTo(maxWatchedTime, true);
                    } else if (currentTime > maxWatchedTime) {
                        maxWatchedTime = currentTime;
                    }
                    
                    if (isMuted || playbackRate !== 1) {
                        videoPointsInvalidated = true;
                    }

                    if(videoPointsInvalidated) {
                        score = 0;
                        scoreTextEl.classList.add('text-red-500');
                    } else if (duration > 0) {
                        const potentialScore = (maxWatchedTime / duration) * 1000;
                        score = Math.floor(potentialScore / 10) * 10;
                        scoreTextEl.classList.remove('text-red-500');
                    }
                    updateScoreDisplay();

                    if ((maxWatchedTime / duration) >= 0.9) {
                        if (continueBtn.disabled) {
                            continueBtn.disabled = false;
                            continueBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                        }
                    }
                }, 500);
            } else {
                clearInterval(progressCheckInterval);
            }
        }

        continueBtn.addEventListener('click', () => {
            if (!continueBtn.disabled) {
                showScreen(gameScreen);
                startGame();
            }
        });

        skipVideoBtn.addEventListener('click', () => {
            score = 0;
            updateScoreDisplay();
            showScreen(gameScreen);
            startGame();
        });

        // --- LÓGICA DO QUIZ ---
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function startGame() {
            if(player && typeof player.stopVideo === 'function') {
                player.stopVideo();
            }
            currentQuestionIndex = 0;
            shuffledQuestions = shuffleArray([...questions]);
            startTime = new Date();
            updateScoreDisplay();
            displayNextQuestion();
        }

        function displayNextQuestion() {
            if (currentQuestionIndex >= shuffledQuestions.length) {
                endGame(true); // Finaliza o jogo se todas as questões foram respondidas
                return;
            }

            const currentQuestion = shuffledQuestions[currentQuestionIndex];
            questionContainer.textContent = currentQuestion.question;
            optionsContainer.innerHTML = '';

            const shuffledOptions = shuffleArray([...currentQuestion.options]);

            shuffledOptions.forEach(option => {
                const button = document.createElement('button');
                button.textContent = option;
                button.classList.add('option-button', 'w-full', 'bg-white/10', 'text-white', 'text-lg', 'sm:text-xl', 'font-bold', 'py-4', 'px-2', 'rounded-xl', 'shadow-lg', 'border-violet-400', 'hover:bg-violet-500/30');
                button.addEventListener('click', handleAnswer);
                optionsContainer.appendChild(button);
            });
        }

        function handleAnswer(e) {
            const selectedOption = e.target.textContent;
            const currentQuestion = shuffledQuestions[currentQuestionIndex];
            const correctAnswer = currentQuestion.answer;
            const explanation = currentQuestion.explanation;

            optionsContainer.querySelectorAll('button').forEach(btn => btn.disabled = true);

            if (selectedOption === correctAnswer) {
                score += currentQuestion.points;
                showFeedback(`+${currentQuestion.points} Pontos! 🎉`, explanation, true);
                e.target.classList.remove('bg-white/10', 'border-violet-400', 'hover:bg-violet-500/30');
                e.target.classList.add('bg-green-500', 'border-green-700', 'text-white');
            } else {
                const wrongFeedbackMsg = `Ops! A resposta certa é "${correctAnswer}".`;
                showFeedback(wrongFeedbackMsg, explanation, false);
                 e.target.classList.remove('bg-white/10', 'border-violet-400', 'hover:bg-violet-500/30');
                e.target.classList.add('bg-red-500', 'border-red-700', 'text-white');
            }
            
            updateScoreDisplay();
            currentQuestionIndex++;
        }

        function showFeedback(message, explanation, isCorrect) {
            feedbackEl.innerHTML = `
                <strong class="block text-3xl mb-2">${message}</strong>
                <span class="text-xl mt-2 block font-normal">${explanation}</span>
                <button id="feedback-continue-btn" class="mt-6 w-full bg-white/20 text-white font-bold py-3 rounded-xl hover:bg-white/30 transition option-button border-white/30">Continuar →</button>
            `;
            
            const colorClass = isCorrect ? 'bg-gradient-to-br from-green-400 to-emerald-600' : 'bg-gradient-to-br from-red-400 to-rose-600';
            feedbackEl.className = `fixed z-50 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-6 sm:p-8 rounded-2xl text-white text-2xl font-bold shadow-2xl w-11/12 max-w-sm text-center transition-all duration-300 ease-in-out ${colorClass} opacity-0 scale-90`;
            
            feedbackEl.classList.remove('pointer-events-none');
            
            requestAnimationFrame(() => {
                feedbackEl.classList.remove('opacity-0', 'scale-90');
            });

            const hideAndContinue = () => {
                feedbackEl.classList.add('opacity-0', 'scale-90', 'pointer-events-none');
                setTimeout(displayNextQuestion, 300); // Wait for animation
            };

            document.getElementById('feedback-continue-btn').addEventListener('click', hideAndContinue, { once: true });
        }
        
        function getMotivationalMessage(finalScore) {
            if (finalScore >= 1000) {
                return "Excelente, " + loggedInUser.firstName + "! Você domina a ciência! 🏆";
            } else if (finalScore >= 500) {
                return "Muito bem, " + loggedInUser.firstName + "! Continue praticando para ficar ainda melhor. 👍";
            } else {
                return "Não desista, " + loggedInUser.firstName + "! Cada tentativa é um passo para aprender mais. ✨";
            }
        }
        
        // --- LÓGICA DE FIM DE JOGO E RANKING ---
        function resetGame() {
            score = 0;
            currentQuestionIndex = 0;
            videoPointsInvalidated = false;
            maxWatchedTime = 0;
            startTime = null;

            updateScoreDisplay();
            
            if (player && typeof player.seekTo === 'function') {
                player.seekTo(0, true);
                player.stopVideo();
            }
            
            continueBtn.disabled = true;
            continueBtn.classList.add('opacity-50', 'cursor-not-allowed');
            videoScreen.querySelector('.score-display').parentElement.classList.remove('text-red-500');

            showScreen(videoScreen);
        }

        async function endGame(allQuestionsAnswered = false) {
            let finalScore = score;
            bonusMessageEl.textContent = '';
            
            if (allQuestionsAnswered){
                 finalScore += 500; // Bônus por terminar todas as questões
                 bonusMessageEl.textContent = `+500 pontos de bônus por terminar o jogo!`;
            }

            const endTime = new Date();
            const timeSpent = Math.round((endTime - startTime) / 1000);
            
            showScreen(endScreen);
            endScreenContent.classList.remove('hidden');
            playAgainButton.classList.remove('hidden');
            backFromRankingButton.classList.add('hidden');
            document.getElementById('final-score').textContent = finalScore;
            finalMessageEl.textContent = getMotivationalMessage(finalScore);
            
            const result = await callAppsScript('saveScoreAndGetRanking', { 
                fullName: loggedInUser.name, 
                turma: loggedInUser.turma, 
                score: finalScore, 
                time: timeSpent,
                nomeDoJogo: NOME_DESTE_JOGO,
                code: loggedInUser.code
            });
            
            if (result.status === 'success') {
                populateRankingTable(result.ranking, loggedInUser.code);
            } else {
                document.getElementById('ranking-body').innerHTML = `<tr><td colspan="4" class="p-4 text-center text-red-500">${result.message}</td></tr>`;
            }
        }
        
        async function displayRanking() {
            showScreen(endScreen);
            endScreenContent.classList.add('hidden');
            playAgainButton.classList.add('hidden');
            backFromRankingButton.classList.remove('hidden');

            const result = await callAppsScript('getRanking', { nomeDoJogo: NOME_DESTE_JOGO });
            if (result.status === 'success') {
                const userCode = loggedInUser ? loggedInUser.code : null;
                populateRankingTable(result.ranking, userCode);
            } else {
                document.getElementById('ranking-body').innerHTML = `<tr><td colspan="4" class="p-4 text-center text-red-500">${result.message}</td></tr>`;
            }
        }

        viewRankingButton.addEventListener('click', displayRanking);
        
        backFromRankingButton.addEventListener('click', () => {
            showScreen(loginScreen);
        });

        function populateRankingTable(ranking, currentUserCode) {
            const tbody = document.getElementById('ranking-body');
            tbody.innerHTML = '';
            if(!ranking || ranking.length === 0){
                tbody.innerHTML = `<tr><td colspan="4" class="p-4 text-center">Ainda não há pontuações. Seja o primeiro!</td></tr>`;
                return;
            }
            ranking.forEach((entry, index) => {
                const isCurrentUser = currentUserCode && entry.code === currentUserCode;
                const row = `
                    <tr class="border-b border-white/10 ${isCurrentUser ? 'bg-yellow-500/30' : ''}">
                        <td class="p-2 font-bold">${index + 1}</td>
                        <td class="p-2">${entry.name}</td>
                        <td class="p-2">${entry.score}</td>
                        <td class="p-2">${entry.turma}</td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        playAgainButton.addEventListener('click', resetGame);

    </script>
</body>
</html>

